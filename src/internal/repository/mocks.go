// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/repository/interface.go
//
// Generated by this command:
//
//	mockgen -destination=../internal/repository/mocks.go -package=repository -source=../internal/repository/interface.go
//

// Package repository is a generated GoMock package.
package repository

import (
	user "grpc-test/internal/entity/user"
	transaction "grpc-test/internal/transaction"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInfo is a mock of Info interface.
type MockInfo struct {
	ctrl     *gomock.Controller
	recorder *MockInfoMockRecorder
}

// MockInfoMockRecorder is the mock recorder for MockInfo.
type MockInfoMockRecorder struct {
	mock *MockInfo
}

// NewMockInfo creates a new mock instance.
func NewMockInfo(ctrl *gomock.Controller) *MockInfo {
	mock := &MockInfo{ctrl: ctrl}
	mock.recorder = &MockInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfo) EXPECT() *MockInfoMockRecorder {
	return m.recorder
}

// SaveUser mocks base method.
func (m *MockInfo) SaveUser(ts transaction.Session, user user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", ts, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockInfoMockRecorder) SaveUser(ts, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockInfo)(nil).SaveUser), ts, user)
}
